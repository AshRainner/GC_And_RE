import java.util.ArrayList;
import java.util.List;

public class GabageCollection {
	
	public static void main(String[] args) {
		/*
		 Garbage Collection 이하 가비지 컬렉션
		 가비지 컬렉션은 프로그래밍 언어에서 자동으로 메모리르 관리하는 프로세스이다.
		  자바에서는 자동으로 가비지 컬렉션이 자동으로 수행된다.
		  Object a = new Object();// 오브젝트 객체 생성 // 메모리에 할당
		  a = new Object();//새로운 오브젝트 객체를 생성하여 a에 할당
		  이런 코드가 있다면 처음에 생성한 오브젝트 객체는 메모리(힙영역)에는 있지만 찾을 수 없는 가비지가 된 것이다.
		  하지만 자바에서는 자동으로 가비지 컬렉션이 참조하지 않는 메모리에 있는 가비지들을 알아서 청소해준다.
		 */
		/*Object a = new Object();//1번 객체
		a = new Object();//2번객체
		//1번 객체는 가비지 컬렉션에 의해 메모리에서 삭제된다.
		*/
		/*
		 가비지 컬렉션이 필요한 가장 큰 이유는 메모리 누수로 인한 버그 및 오류를 막기위해서 필요하다.
		 가비지 컬렉션이 메모리를 자동으로 관리하기 때문에 개발자는 메모리 관리에 대한 부담을 줄일 수 있다.
		 가비지 컬렉션이 동작하는 알고리즘은
		 Stop The World와 Mark and Sweep가 있다.
		 Stop The World 알고리즘을 이용하는 가비지 컬렉션의 경우
		 1. 앱에서 실행중인 모든 스레드 중지
		 2. 중지된 스레드가 가비지 컬렉션에 의해 처리되지 않도록 처리
		 3. 가비지 컬렉션 실행
		 4. 가비지 컬렉션 종료 후 중지된 스레드 재개
		 순으로 실행된다.
		 Mark and Weep 알고리즘은
		 1. Marking
		 모든 객체를 순회하면서 참조되지 않는 객체를 식별하여 가비지로 인식
		 2. Sweep and Compact
		 가비지를 힙영역에서 제거한 뒤 제거된 뒤 남은 공간들을 압축한다.
		 */
		
		/*
		 가비지 컬렉션이 제대로 동작되도록 코드를 작성하기 위해서는
		 1. 객체를 더 이상 사용하지 않으면 null로 참조를 해제한다.
		 2. 가능한 객체는 재사용한다.
		 3. 필요한 경우가 아닌 경우 finalize 메소드(소멸자)를 사용하지 않는다.
		 4. 객체를 생성할 때, 객체의 크기와 용도에 맞게 생성한다.
		 */
		/*ArrayList<String> list = new ArrayList<>();
		while(true) {
			String value = new String("요소");
			list.add(value);
		}*/
		//해당 코드는 가비지 컬렉션은 정상적으로 작동은 되나 leak을 유발하는 코드이다.
		//2,4번을 지키지 않은 코드이다.
		//list에 무한히 String 객체를 넣고 있기 때문에 value에 String이 재 선언되는 시점에서 list가
		//그 전에 있던 String 객체를 참조하고 있기 때문에 가비지 컬렉션의 대상이 되지 않는다.
		//리스트의 크기를 제한하거나, 불필요한 객체를 적시에 제거하는 코드를 작성해야한다.
		
	}

}
